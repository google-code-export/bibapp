#summary Installation Instructions for BibApp
#labels Featured

*_Table of Contents:_*
<wiki:toc max_depth="4" />

= Introduction =

!BibApp is a [http://www.rubyonrails.org/ Ruby on Rails] 2.1 web application.  If you are familiar with installing Ruby on Rails applications, !BibApp should be no different!  If this is your first time with Ruby on Rails, don't worry...we've tried to make things easy on you.

At a basic level, Ruby on Rails applications require the following:
  * A Web server
  * A Database
  * Ruby and..
  * Rails

Currently, because of a small development/testing team, we have some recommendations for your Rails setup for !BibApp.  You may be able to get away with other non-recommended Ruby on Rails setups.  But, we haven't verified they all work with !BibApp, yet. 

So, without further ado...

= NEW! !BibApp and Ruby on Rails stack installation on Ubuntu Linux =
!BibApp and Rails stack on Ubuntu
  # Install RubyEE
    # Download the .deb package: http://www.rubyenterpriseedition.com/download.html
    # Install the deb: sudo dpkg -i path/to/deb/file
    # Add /opt/ruby-enterprise/bin to PATH in /etc/environment
    # Create sym links to RubyEE executables 
      {{{
ln -s /opt/ruby-enterprise/bin/ruby /usr/bin/ruby
ln -s /opt/ruby-enterprise/bin/gem /usr/bin/gem
ln -s /opt/ruby-enterprise/bin/ri /usr/bin/ri
ln -s /opt/ruby-enterprise/bin/rdoc /usr/bin/rdoc
ln -s /opt/ruby-enterprise/bin/irb /usr/bin/irb
      }}}
    # Ubuntu sudo is set to a secure path, so you need to tell it where rake is
      {{{
sudo ln -s `which rake` /usr/local/bin/
      }}}
  # Install Apache 2
    {{{
sudo apt-get apache2
    }}}
  # Install Apache 2 development headers:
    {{{
sudo apt-get install apache2-prefork-dev 
    }}}
  # Install Apache Portable Runtime (APR) development headers:
    {{{
sudo apt-get install libapr1-dev 
    }}}
  # Install Apache Portable Runtime Utility (APU) development headers:
    {{{
sudo apt-get install libaprutil1-dev
    }}}
  # Install Phusion Passenger
    # Get the gem 
      {{{
sudo gem install passenger
      }}}
    # Install and follow the instructions 
      {{{
sudo /opt/ruby-enterprise/bin/passenger-install-apache2-module
      }}}
  # Add these lines to /etc/apache2/apache2.conf
    {{{
LoadModule passenger_module /opt/ruby-enterprise/lib/ruby/gems/1.8/gems/passenger-2.2.5/ext/apache2/mod_passenger.so
PassengerRoot /opt/ruby-enterprise/lib/ruby/gems/1.8/gems/passenger-2.2.5
PassengerRuby /opt/ruby-enterprise/bin/ruby

<VirtualHost *:80>
  ServerName localhost
  DocumentRoot /path/to/rails_projects
  RailsBaseURI /bibapp
  <Directory /path/to/rails_projects>
    AllowOverride All
    Options Indexes FollowSymLinks MultiViews
    Order allow,deny
    Allow from all
  </Directory>
  RailsEnv development
</VirtualHost>
    }}}
    * NB. The /path/to/rails_projects will be the path to where you create symbolic links to your bibapp/public folder. In order for Passenger to process sub-URLs correctly, this sym link has to have the same name as your sub-URL. 
    {{{
(e.g., URL      => http://mydomain.edu/bibapp
       sym link => ln -s /path/to/bibapp/public /path/to/rails_projects/bibapp)
    }}}
    * More on this at Step 16.
  # Install PostgreSQL
  # Download !BibApp code
    {{{
svn checkout http://bibapp.googlecode.com/svn/trunk/ ~/bibapp/
    }}}
  # Adjust permissions for attachment and logs
    * NB. Passenger implements user switching based on the owner of config/environment.rb, so ifconfig/environment.rb is owned by joe, Passenger will launch the corresponding Rails application as joe as well
  # Configure BibApp settings in the config/ directory
  # Install rake
    {{{
gem list rake #see if it's there
gem install rake #if not, install it
    }}}
  # Install database driver gem
    {{{
gem install postgres -- --with-pgsql-dir=/path/to/pgsql 
    }}}
  # Database Setup:
    # Create bibapp user
      {{{
createuser -dSRP bibapp
      }}}
    # Create bibapp database
      {{{
createdb -U bibapp -E UNICODE bibapp_development
      }}}
  # Generate BibApp database structure
    {{{
rake db:schema:load
    }}}
  # Create an 'admin' user, and assign as System Administrator
    * Run from script/console
      {{{
admin = User.create(:login                 => 'admin',
                    :email                 => 'admin@myu.edu',
                    :password              => 'bibapp',
                    :password_confirmation => 'bibapp')   
admin.activate            
admin.roles << Role.create( :name => 'admin', :authorizable_type => 'System')
      }}}
  # Create a symbolic link to your bibapp/public directory
    {{{
ln -s ~/bibapp/public ~/rails_projects/bibapp
    }}}
  # Start solr
    {{{
sudo rake solr:start 
    }}}
  # Start delayed jobs
    {{{
rake jobs:work &
    }}}

= Software Pre-requisities =

!BibApp should run on any Operating System.  Currently we've had it successfully running on Linux, Mac OS X and Windows XP.
  * _Note:_ Although !BibApp will run on Windows, it is not recommended for production on Windows systems.  !BibApp runs slightly slower on Windows as the backend, asynchronous processing functionality that !BibApp uses doesn't currently work for Windows.   

!BibApp *requires* the following software to function properly:
  * [http://www.ruby-lang.org/ Ruby] 1.8.5 or later
    * Check your version by running `ruby --version` at command line
  * [http://www.rubygems.org/ RubyGems] 1.2.0 or later
    * Check your version by running `gem --version` at command line
    * If you have an older version of !RubyGems, you should be able to update it like this:
      {{{
      gem update --system
      }}}
  * [http://java.sun.com/javase/downloads/index.jsp Java] 1.5 or later (_note:_ Java 1.5 is also sometimes called Java 5.x, similarly Java 1.6 is also called 6.x)
    * Check your version by running `java -version` at command line

!BibApp gives you a few options when it comes to your database.  Currently, we support either of the following:
  * [http://www.mysql.com/ MySQL] 4.1 or 5.0
  OR
  * [http://www.postgresql.org/ PostgreSQL] 8.x (7.4 may also work)

_Optional:_ If you want to be able to pull down !BibApp directly from our !GoogleCode site, you may also wish to install [http://subversion.tigris.org/ Subversion (svn)].

That's everything you need to get started...

== Additional Pre-requisites for Ubuntu / Debian (not Mac OSX) ==

Before trying an installation on Ubuntu or Debian-based operating systems, there are a couple of libraries you'll want to make sure you have installed:
  * `libxml2` and `libxml2-dev`
  * Latest Ruby Development package (e.g. `ruby1.8-dev`)

In addition, if you are planning to install !BibApp on MySQL, you will need to MySQL development package.  This is unnecessary if you will be using PostgreSQL.
  * `libmysqlclient-dev`

You should be able to install these packages quickly via `apt-get`.  For example:
  {{{
  sudo apt-get install libxml2 libxml2-dev ruby1.8-dev
  }}}

== Additional Pre-requisites for Mac OSX (Eric - 2008.12.17 - Beta!)==

You'll need to install [http://developer.apple.com/Tools/xcode/ Apple's XCode tools]. 

Header files are not delivered by default with Mac OS X, you need to install the Xcode Tools package after installing OSX. You can find it in the Optional Installs / Xcode Tools directory on the Leopard DVD. 


= Get Started =

Before we jump in, it's worth explaining a bit about what software !BibApp has bundled (Rails uses the term "frozen") within it.  You don't need to understand what everything is doing, but we just want to let you know it's there! When you download !BibApp, it already comes pre-packaged with the following:
  * [http://www.rubyonrails.org/ Rails] 2.1  - That's right, you don't even have to install Rails!
  * [http://lucene.apache.org/solr/ Solr] - Used for all the !BibApp browse/search interfaces
  * A variety of [http://www.rubygems.org/ Ruby Gems] and Rails Plugins. It's worth highlighting a few custom plugins created specifically for !BibApp:
    * `citation_parser` and `citation_importer` - These custom plugins parse citations from our various supported input formats, and import the data into our database structure.  As more citation parsers are created, we'll be able to support more input formats!
    * `sword_client` - This is our custom [http://www.swordapp.org SWORD (Simple Web-service Offering Repository Deposit)] client.  It lets you deposit research (both metadata and files) into your local repository directly from !BibApp!


== Download Code ==

There are two different ways to install !BibApp:

  # If you have Subversion installed, you can just pull down the latest code (the below example checks it out to your `~/bibapp/` directory):
    {{{
    svn checkout http://bibapp.googlecode.com/svn/trunk/ ~/bibapp/
    }}}
  # Otherwise, you can download the latest Zipped up release from the [http://code.google.com/p/bibapp/downloads/list Downloads] 

  || *Note #1:* We currently recommend installing !BibApp from our Subversion "trunk".  That version is not only more stable than the old 0.7 release, but it also should be easier to install. ||

  || *Note #2:* Throughout the remainder of these instructions we use the placeholder `[bibapp]` to represent the location where you have downloaded the !BibApp code! ||


== Configure !BibApp ==

Next, you'll need to edit the configurations for your local settings.  In the `[bibapp]/config` directory, look for the following "example" configurations:

  * database.yml.example
  * ldap.yml.example
  * personalize.rb.example
  * smtp.yaml.example
  * solr.yml.example
  * sword.yml.example

You'll need to copy each of these files into a file _without_ the `.example` extension and personalize the contents as necessary.  Each of the above files include instructions within them describing how to configure them properly for your institution. In the end you should end up with a file list similar to the following (REQUIRED configuration files are *bold*):

  * *database.yml* - Your local database settings (take a look at the samples for both MySQL and PostgreSQL)
  * ldap.yml - Your campus LDAP directory settings
    * Setting this configuration eases the process of adding People to !BibApp by allowing you to search your local LDAP directory to pre-populate person information.
    * You may disable this configuration by leaving the ".example" file extension on the file.
  * *personalize.rb* - Your !BibApp personalization settings
  * *smtp.yml* - Your SMTP settings for user account creation verification emails
  * *solr.yml* - Your Solr port settings (should not require changes, unless the specified ports are already in use)
  * sword.yml - Your SWORD server settings
    * This configuration is only necessary if you have a local digital or institutional repository which supports [http://www.swordapp.org/ SWORD (Simple Web-service Offering Repository Deposit)].  If you have a repository supporting SWORD, !BibApp can accept uploaded files and make deposits (of both files and metadata) directly into your local repository.
    * You may disable this configuration by leaving the ".example" file extension on the file.


== Ruby Gem Installations ==

Unfortunately, we cannot bundle everything  within !BibApp.  We've tried to minimize your need to install Gems, but there are still a few you'll need to install yourself:
  # First, make sure you have `rake` installed:
     {{{
     gem list rake
     }}}
    * If it's missing, you'll need to install `rake`:
     {{{
     gem install rake
     }}}
    * *Note:* On Ubuntu/Debian and Mac OS X systems, you will often need to run *all* `gem` commands as a superuser: `sudo gem install rake`
  # Auto-install all our gem prerequisites, via this `rake` command:
     {{{
     rake gems:install
     }}}
    * *Note:* There are a few common errors that may occur with this command.  Check the table of *Common Warnings / Errors* below, if you encounter problems. 
  # Database Driver Gem - based on your database of choice
    * If you are using MySQL, install the `mysql` gem:  
     {{{ 
     gem install mysql -- --with-mysql-dir=/path/to/mysql 
     }}}
      * *(Mac OSX only)* If you're using the stock Leopard MySQL, run this install instead:
       {{{
       sudo env ARCHFLAGS="-arch i386" gem install mysql -- \
       --with-mysql-dir=/usr/local/mysql --with-mysql-lib=/usr/local/mysql/lib \
       --with-mysql-include=/usr/local/mysql/include
       }}}
    * If you are using PostgreSQL, install the `postgres` gem:
     {{{ 
     gem install postgres -- --with-pgsql-dir=/path/to/pgsql 
     }}}
  # ~~Ruby Web Server - [http://mongrel.rubyforge.org/ Mongrel] is recommended.  We also recommend `mongrel_cluster`, which allows you to run several mongrel instances in a cluster (though, if you are just trying out !BibApp, this isn't really necessary).~~
     {{{
     gem install mongrel 
     gem install mongrel_cluster 
     }}}
    We are now recommending the Apache2 web server with Phusion Passenger (aka mod_rails). See the wiki page Mongrel2PassengerMigration for instructions. 

=== Common Warnings / Errors ===

|| *Error / Warning Message* || *Resolution* ||
|| Log File Warning:<br/>`Rails Error: Unable to access log file.  Please ensure that /bibapp/log/development.log exists and is chmod 0666.` || Make sure to change the permissions on this log file, so that it is both _readable_ and _writeable_ to everyone.  For example: `chmod 0666 development.log` ||
|| Permissions Error:<br/>`ERROR: While executing gem ... (Gem::FilePermissionError)` || _For Ubuntu/Debian or Mac OS X:_ This means you need to run the command as a super user.  So, try adding `sudo` before the command: (e.g.) `sudo rake gems:install` ||
|| Error building `libxml-ruby` gem:<br/> `ERROR: Failed to build gem native extension` || _For Ubuntu/Debian:_ You should be able to resolve this error by installing `libxml2` and `libxml2-dev`: (e.g.) `sudo apt-get install libxml2 libxml2-dev` ||
|| Loading error:<br/> `'require': no such file to load -- mkmf (LoadError)` || _For Ubuntu/Debian:_ You should be able to resolve this error by installing the latest Ruby development package (`ruby1.8-dev`): (e.g.) `sudo apt-get install ruby1.8-dev` ||

== Setup Your Database ==

Now, you'll need to setup a database for !BibApp.  You should already have installed either MySQL or PostgreSQL.  So, it's just a matter of creating a new database!  

Make sure your database is named the same as the 'database' setting in your `config/database.yml` file!  In addition, you should login as the user specified in your `config/database.yml` when creating your database (to ensure that user owns the database) 

For this example, we're just setting up a !BibApp Development database.  But, you can use the same concept to also setup a Test and Production database, when you are ready.

   * *For MySQL:*  Connect to MySQL, create a UTF8 database named 'bibapp_development' and a !BibApp database user (e.g. named 'bibapp') using the following SQL queries:
      {{{
      CREATE DATABASE bibapp_development CHARACTER SET = 'utf8';
      GRANT ALL ON bibapp_development.* to 'bibapp'@'localhost' identified by 'PASSWORDHERE';
      FLUSH PRIVILEGES;
      }}}
   Obviously, remember to change `PASSWORDHERE` to the password you want set for your 'bibapp' database user.   

   * *For PostgreSQL:* Use the following two commands to first create a !BibApp database user (e.g. named 'bibapp') and then create a database named 'bibapp_development' with a database owner of 'bibapp': 
      {{{
      createuser -dSRP bibapp
      createdb -U bibapp -E UNICODE bibapp_development
      }}}

Now you can generate the !BibApp database structure into your new database!  From within your `[bibapp]` directory:
    {{{
    rake db:migrate
    }}}
You should see a large number of 'migration' messages scroll by.  That's perfectly normal! But, if any errors appear, there are problems which you will have to resolve *before* !BibApp will function properly! 

Before continuing, you also need to initialize your database with the current [http://www.sherpa.ac.uk/romeo.php SHERPA RoMEO] publisher policy data.  This data is used to help researchers determine which of their publications can be deposited in a local repository for safe keeping.  From within your `[bibapp]` directory:
    {{{
    rake sherpa:update_publisher_data
    }}}

Your database should now be setup and initialized properly!


== Startup !BibApp ==

You're almost there!

In order to startup !BibApp on your server, you must do *both* of the following (from within your `[bibapp]` directory):
  * _Start Solr:_ Solr handles all the fancy browsing and searching in !BibApp
     {{{
     rake solr:start
     }}}
  * _Start your web server:_ We're assuming you installed Mongrel, for the sake of these instructions.
     {{{
     mongrel_rails start
     }}}

Try it out!  Assuming your web server is on port 3000 (which is Mongrel's default), you should have !BibApp running at:  http://localhost:3000/


= Updating !BibApp (Bill - 2009.04.27 - Beta!) =

Steps for updating !BibApp with the latest from Subversion. Run all commands as root (sudo).

  # (_Recommended_) Make a full back up of the `bibapp/` directory
    {{{
    cp -R bibapp/ bibapp.bak/
    }}}
  # (_Recommended_) Back up the database
    * For PostgreSQL:
    {{{
    pg_dump -U bibapp -E UNICODE -f <backup_file_name_path> <database_name>
    }}}
  # Stop mongrel
    * For a single Mongrel:
    {{{
    mongrel_rails stop
    }}}
    * For Mongrel cluster:
    {{{
    mongrel_rails cluster::stop
    }}}
  # Update the source code
    {{{
    cd bibapp/ 
    svn update
    svn status
    }}}
  # Rebuild the database (_only necessary when there are new migration scripts_)
    {{{
    rake db:migrate
    }}}
  # Check/Edit any updated `config/` files
    <br />
  # Restart/Refresh solr (_refresh only necessary when solr configs are updated in `vendor/bibapp-solr`_)
    {{{
    rake solr:stop
    rake solr:start
    rake solr:refresh_index
    }}}
  # Install any new gems (_only necessary when `environment.rb` is changed_)
    {{{
    rake gems:install
    }}}
  # Start Mongrel
    * For a single Mongrel:
    {{{
    mongrel_rails start
    }}}
    * For Mongrel cluster:
    {{{
    mongrel_rails cluster::start
    }}}

= Using !BibApp =

== Login For the First Time ==

!BibApp comes with a pre-initialized "admin" user.  The login for this user is "admin" (lowercase), and the default password is "bibapp" (lowercase).

This "admin" user has System Administrator rights, and can do anything within !BibApp.  Therefore, it is _absolutely necessary_ to *login and change the password* for this user as soon as possible.

_Repeat:_ it is _absolutely necessary_ to *login and change the password* for this user as soon as possible.  

So, login and do it now!  

  # After logging in, click on "Welcome: admin" in the upper right, to view your "admin" user's account information.  
  # Click "Change Password", and fill out the default password along with your new password

Finally, (although not required at this time) you may wish to change the email account associated with this "admin" user.   At this time, !BibApp only uses that email address if you have forgotten your password and request a new one be generated.   So, if you have any concerns about forgetting your "admin" user's password, change the email to point to a valid email address!

= Problems / Questions / More Information =

We're definitely aware that these instructions are a bit lacking.  We're working on updates before our !BibApp 1.0 release.  If you run into any interesting problems or "gotchas" during the installation or setup, let us know!  

The easiest (and preferred) way to contact us is via our [http://groups.google.com/group/bibapp BibApp Google Group].

If you ran into problems during the installation, try and send us the following:
  * Ruby version (run `ruby --version`)
  * Gem version (run `gem --version`)
  * Operating system
  * Task/step you were performing
  * Error message text