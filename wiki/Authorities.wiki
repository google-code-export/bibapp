#summary Authority work in the BibApp

= Introduction =

Citation data is ugly.  We need to create authority records for Authors, Publications and Publishers.


= Details =

Citation data collected for 48 People in the Engineering Physics department at UW-Madison produces:

  * 4512 unique AuthorString records
  * 1282 unique Publication records
  * 0431 unique Publisher records
  * 3053 unique Citation records

== Publication / Publisher Authorities ==

We'll start with the simple case.  For Publications and Publishers, we collect every string variant of their names:

*Note*: It's probably a very good idea to compare based on a cleaned version of the authority values, to eliminate matches missed because of capitalization and punctuation. Things of the form "American Institute of Physics" to "americaninstituteofphysics":

{{{
name.gsub!(/[^A-Za-z0-9]+/, '').downcase!
}}}

=== Publisher Example ===

  # American Institute of Physics
  # AMER INST PHYSICS
  # American Institute of Physics Inc
  # AIP
  # American Institute of Physics Inc., Melville, NY 11747-4502, United States
  # American Institute of Physics Inc., Woodbury, NY, USA
  # American Inst of Physics, Woodbury, NY, USA
  # American Institute of Physics Inc., Melville, United States

Each Publisher record contains an "authority_id" field, where we can self-join to the chosen authority record.  In the case above, "American Institute of Physics" is the chosen authority record, so each record below can reference #1 in their authority_id field.

The same simple technique can be applied to Publication records.

=== Publication Example ===

  # Acta Astronaut. | 0094-5765
  # Acta Astronaut. (UK) | 0094-5765
  # Acta Astronautica | 0094-5765

Here "Acta Astronautica" is the chosen authority record, so each record above #3 can reference #3 in their authority_id field.

== Author Authorities ==

Author authorities are much more difficult.  In the BibApp's new architecture, we no longer add Citations to the application via Authors to produce Authorships.  Now we simply load Citation data collected for people at our institution.  Each Citation is processed to discover the individual AuthorStrings (names) associated with the Citation.

=== Citation Example ===

Dong, Liang, Jiang, Hongrui. (2007). Autonomous microfluidics with stimuli-responsive hydrogels. Soft Matter, 3(10), 1223-1230.

The two author stings above are:

  * Dong, Liang
  * Jiang, Hongrui

=== Workflow ===

I'll use myself as an example:

User name: Eric William Larson

I login to the BibApp for the first time and the website asks me to select my Author names.  I type in my last name to filter the AuthorString index.  Here's what I see:

Potential Author variants:

  * Larson, D
  * ---
  * Larson, E
  * Larson, EW
  * Larson, E.W.
  * Larson, Eric W.
  * Larson, Eric WM.
  * Larson, Eric William
  * ---
  * Larson, F

Maybe all the {{{Larson, E*}}} AuthorStrings are correct (I have published under all these name variants), so I select the checkbox next to AuthorString to create a new PenName associatation record, tying my Person to each AuthorString.  Lastly, I select one of these variants as my "preferred" name: Larson, E.W.

Now I have created 6 PenNames for myself (Person 1: Eric William Larson).  Anytime a new Citation is entered into the BibApp for any of these strings {{{Larson, E*}}} PenNames, the BibApp will automatically create an Authorship row, creating the association between Citation and Person (Eric William Larson).

== It's not _that_ simple! ==

The above is great if no one else "claims" one of my selected PenNames.  When Erica Larson (Person 2: Erica Larson) enters the application and selects "Larson, E" as one of her PenNames, what should we do?

Every Authorship row, associating a Person to a Citation needs to have a "status" and "score" attribute.

Status options: "calculated", "verified", "denied"
Score: integer representing "how certain we feel the record is valid"

Now to handle Erica's case:

  # Create Authorship rows associating Erica (Person 2) to all "Larson, E" AuthorString related Citations.
  # For each Authorship record above set the Authorship.status attribute to "calculated"

Now two people claiming the "Larson, E" AuthorString have Authorship records for some Citations... this could be correct if the AuthorString appeared twice in the citation (probably unlikely).

Who's the real author? 

Sorry.  I'll *still* need to finish this in the future. :)

== Rendering Citations ==

Now we have Publication, Publisher and Author authorities, so let's use them.  For each Citation, we collect publication_id, publisher_id and authorships(citation_id:author_string_id:person_id).  When we query the database to render a list of citations, we can run additional queries to locate authority (ex. Publication.authority.name).


- EL